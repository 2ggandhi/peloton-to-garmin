@model HomeViewModel
@section styles {
    <link href="@Url.Content("~/css/home.css")" rel="stylesheet" type="text/css" />
}
@{
    ViewData["Title"] = "Home Page";
    ViewBag.Page = "home";


    var syncStatusBorderClass = "border-light";
    var syncStatusTextClass = "";
    var syncStatusBadgeClass = "bg-light";

    switch (Model.SyncStatus)
    {
        case Common.Database.Status.Running:
            syncStatusBorderClass = "border-success";
            syncStatusBadgeClass = "bg-success";
            break;
        case Common.Database.Status.NotRunning:
            syncStatusBorderClass = "border-secondary";
            syncStatusTextClass = "text-secondary";
            break;
        case Common.Database.Status.Dead:
            syncStatusBorderClass = "border-danger";
            syncStatusTextClass = "text-danger";
            syncStatusBadgeClass = "bg-danger";
            break;
        case Common.Database.Status.UnHealthy:
            syncStatusBorderClass = "border-warning";
            syncStatusBadgeClass = "bg-warning";
            break;
    }
}

<div class="text-center">
    <h1 class="display-4">Welcome to the Peloton to Garmin UI!</h1>
    <p>This is a work in progress and not guaranteed to fully work yet. Feel free to check it out.</p>
</div>

<br />

<div class="row">
    <div class="col-sm-2">
        <div class="card @syncStatusBorderClass mb-3">
            <div class="card-body @syncStatusTextClass">
                <h5 class="card-title">Sync Service  <span class="p-2 rounded-circle @syncStatusBadgeClass home-page-badge"></span></h5>
                <p class="font-weight-bold">@Model.AutoSyncHealthString</p>
                @if (@Model.SyncStatus != Common.Database.Status.NotRunning)
                {
                    <p><span class="font-weight-bold">Last Sync: </span><br />@Model.LastSyncTime</p>
                    <p><span class="font-weight-bold">Last Successful Sync: </span><br />@Model.LastSuccessfulSyncTime</p>
                    <p><span class="font-weight-bold">Next Scheduled Sync: </span><br />@Model.NextSyncTime</p>
                }
            </div>
        </div>
    </div>
    <div class="col-sm-10">
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">Recently Synced Items</h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col" class="col-3">Date</th>
                            <th scope="col" class="col-6">Workout</th>
                            <th scope="col">Converted</th>
                            <th scope="col">Uploaded</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var workout in Model.RecentWorkouts)
                        {
                            var converted = workout.ConvertedToFit || workout.ConvertedToTcx;
                            <tr>
                                <td>@workout.WorkoutDate</td>
                                <th scope="row">@workout.WorkoutTitle.Replace("_", " ")</th>
                                <td>@converted</td>
                                <td>@workout.UploadDate.HasValue</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




